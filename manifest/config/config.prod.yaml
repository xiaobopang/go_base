# doc: https://goframe.org/pages/viewpage.action?pageId=44449486
server:
  address: ":8888"
  keepAlive: true # 是否开启Keep-Alive功能. 默认true
  idleTimeout: "60s" # 仅当Keep-Alive开启时有效, 请求闲置时间. 默认为60秒
  maxHeaderBytes: "20KB" # 请求Header大小限制(Byte). 默认为10KB
  clientMaxBodySize: "50MB" # 客户端提交的Body大小限制, 同时也影响文件上传大小, 默认设置为8MB
  dumpRouterMap: true # 是否在Server启动时打印所有的路由列表. 默认为true
  serverAgent: "GoBase HTTP Server" # 服务端Agent信息. 默认为"GoBase HTTP Server"

  # API文档
  #  openapiPath: "/api.json"
  #  swaggerPath: "/swagger"

  # 优雅关闭服务的超时时间, 如果超过这里设定的时间请求还没有处理完, 就直接关闭服务
  # NOTE: 优雅关闭服务的特性是默认开启的, 和平滑重启的配置无关
  gracefulShutdownTimeout: 10 # 默认 5秒, 建议根据实际业务情况调整

  # 平滑重启
  # NOTE: 不建议使用此特性, 特别是通过systemd、supervisor管理进程的场景, 或容器化场景, 不要开启此特性
  graceful: false # 是否开启平滑重启特性, 开启时将会在本地增加10000的本地TCP端口用于进程间通信. 默认false. 平滑重启: kill -SIGUSR1 进程ID
  gracefulTimeout: 10 # 父进程在平滑重启后多少秒退出, 默认2秒. 若请求耗时大于该值, 可能会导致请求中断

  # 服务日志(包括访问日志和server错误日志)
  logPath: "logs/" # 日志文件存储目录路径, 建议使用绝对路径. 默认为空, 表示关闭
  logStdout: true # 日志是否输出到终端. 默认为true
  errorStack: false # 当Server捕获到异常时是否记录堆栈信息到日志中. 默认为true
  errorLogEnabled: true # 是否记录异常日志信息到日志中. 默认为true
  errorLogPattern: "error-{Ymd}.log" # 异常错误日志文件格式. 默认为"error-{Ymd}.log"
  accessLogEnabled: true # 是否记录访问日志(包含异常的访问日志). 默认为false
  accessLogPattern: "access-{Ymd}.log" # 访问日志文件格式. 默认为"access-{Ymd}.log"

  # 针对服务日志的扩展配置
  logger:
    file: "{Ymd}.log" # 这里只记录server启动过程中gf默认打印的日志, 默认 {Y-m-d}.log; 日志所在路径为server.logPath指定的目录
    ctxKeys: ["user", "mail"]
    rotateExpire: "1d"
    rotateBackupExpire: "3d"
    rotateBackupLimit: 3
    rotateCheckInterval: "1h"

# 开发者通过g.Log()打印的通用日志, 对server服务日志无效
# doc: https://goframe.org/pages/viewpage.action?pageId=1114388
logger:
  path: "logs/" # 日志文件目录, 如果为空, 表示不记录到文件; 建议目录和server.logPath保持一致
  file: "{Ymd}.log" # 日志文件格式. 默认为 {Y-m-d}.log; 建议和server.logger.file保持一致
  level: "all" # DEBU < INFO < NOTI < WARN < ERRO < CRIT, 也支持ALL, DEV, PROD常见部署模式配置名称. level配置项字符串不区分大小写
  stStatus: 0 # 是否打印错误堆栈(1: enabled - default; 0: disabled). 如果开启, 使用g.Log().Error 将会打印错误堆栈
  ctxKeys: ["user", "mail"] # 自动打印Context的变量到日志中. 默认为空
  stdout: true # 日志是否同时输出到终端. 默认true
  stdoutColorDisabled: false # 关闭终端的颜色打印. 默认false
  writerColorEnable: false # 日志文件是否带上颜色. 默认false, 表示不带颜色
  rotateExpire: "1d" # 多长时间切分一次日志
  rotateBackupExpire: "3d" # 删除超过多长时间的切分文件, 默认为0, 表示不备份, 切分则删除. 如果启用按时间备份, rotateBackupLimit 必须设置为一个相对较大的数
  rotateBackupLimit: 3 # 最多保留多少个切分文件, 但rotateBackupExpire的配置优先. 默认为0, 表示不备份, 切分则删除. 可以不设置rotateBackupExpire
  rotateCheckInterval: "1h" # 滚动切分的时间检测间隔, 一般不需要设置. 默认为1小时
  format: "" # "json" or other, NOTE: 此为自定义选项, 非gf提供, 也对server服务日志和sql日志生效

  # 为子项目go-base-cli配置独立的logger
  cli:
    path: "logs/"
    file: "cli-{Ymd}.log"
    level: "all"
    stStatus: 1
    stdout: true
    stdoutColorDisabled: false
    writerColorEnable: false
    rotateExpire: "1d"
    rotateBackupExpire: "3d"
    rotateBackupLimit: 3
    rotateCheckInterval: "1h"
    format: ""

# doc: https://goframe.org/pages/viewpage.action?pageId=1114245
database:
  # sql日志
  logger:
    path: "logs/"
    file: "sql-{Ymd}.log"
    level: "all"
    stdout: true
    ctxKeys: ["user", "demo"]
    rotateExpire: "1d"
    rotateBackupExpire: "3d"
    rotateBackupLimit: 3
    rotateCheckInterval: "1h"

  default:
    link: "mysql:root:pxb@tcp(127.0.0.1:3366)/gf-test?loc=Local&parseTime=true"
    debug: false # 默认 false
    charset: "utf8mb4" #数据库编码(如: utf8/gbk/gb2312)，一般设置为utf8
    dryRun: false #ORM空跑(只读不写)
    maxIdle: 10 #连接池最大闲置的连接数
    maxOpen: 10 #连接池最大打开的连接数
    maxLifetime: 30 #(单位秒)连接对象可重复使用的时间长度

# Redis 配置示例
redis:
  # 单实例配置
  default:
    address: 127.0.0.1:16379
    db: 1
    pass: pxb
    idleTimeout: 600
    maxActive: 100